- name: Deploy all
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    additional_zones:

  tasks:
  ###
  # SQL INSTANCE
  ##
  - name: Check if SQL instance installed
    shell: gcloud sql instances list | grep {{sql_instance_id}} | wc -c
    register: output
  - set_fact:
      sql_not_installed: "{{ true if output.stdout_lines[0] == '0' else false}}"
  - name: Create SQL intstance
    shell: >
      gcloud sql instances create {{sql_instance_id}}
      --no-backup
      --database-version=POSTGRES_9_6
      --storage-type=HDD
      --region={{region}}
      --cpu=1
      --memory=3840MiB
      --storage-auto-increase
    when: sql_not_installed
  - name: Create SQL User
    shell: gcloud sql users create stellar '*' --password=1q2w3e --instance={{sql_instance_id}}
    ignore_errors: yes
    when: sql_not_installed
  - name: Create bifrost DB
    shell: gcloud sql databases create bifrost  --instance={{sql_instance_id}}
    ignore_errors: yes
    when: sql_not_installed
  ##
  # K8S CLUSTER
  ##
  - name: Create cluster
    shell: >
      gcloud container clusters create {{cluster_name}}
      --no-enable-cloud-logging
      --enable-cloud-monitoring
      --no-enable-cloud-endpoints
      --num-nodes=2
      --machine-type={{machine_type}}
      --zone={{zones[0]}} --additional-zones={{zones[1]}}
    ignore_errors: yes
  - name: Get k8s credentials from gcloud
    shell: gcloud container clusters get-credentials {{cluster_name}} --zone {{zones[0]}} --project {{project}}
  - name: Set namespace `{{namespace}}`
    shell: kubectl config set-context $(kubectl config current-context) --namespace={{namespace}}

  - name: Generate Namespaces YAML
    template:
      src: deploy-namespaces.yaml.j2
      dest: ./tmp/deploy-namespaces.yaml
  - name: Deploy namespaces
    shell: kubectl create -f ./tmp/deploy-namespaces.yaml
    ignore_errors: yes

  ##
  # BALANCER IPS
  ##
  - name: Deploy Stellar lb static IP
    shell: gcloud compute addresses create {{namespace}}-stellar-lb-ip --region={{region}}
    ignore_errors: yes
  - name: Set stellar_lb_ip
    shell: gcloud compute addresses list | grep {{namespace}}-stellar-lb-ip | gawk '{print $3}'
    register: output
  - set_fact:
      stellar_lb_ip: "{{output.stdout_lines[0]}}"

  - name: Deploy Bifrost lb static IP
    shell: gcloud compute addresses create {{namespace}}-stellar-bifrost-lb-ip --region={{region}}
    ignore_errors: yes
  - name: Set stellar_lb_ip
    shell: gcloud compute addresses list | grep {{namespace}}-stellar-bifrost-lb-ip | gawk '{print $3}'
    register: output
  - set_fact:
      bifrost_lb_ip: "{{output.stdout_lines[0]}}"

  ##
  # DISKS & PERSISTENT VOLUMES(CLASSES)
  ##
  - name: Create disks
    shell: |
      gcloud compute disks create {{namespace}}-geth-{{item}} --size {{geth_storage_capacity_gb}}GB --type pd-standard --zone {{item}}
      gcloud compute disks create {{namespace}}-stellar-{{item}} --size {{stellar_storage_capacity_gb}}GB --type pd-standard --zone {{item}}
    ignore_errors: yes
    with_items: "{{zones}}"

  - name: Generate Volumes YAML
    template:
      src: deploy-volumes.yaml.j2
      dest: ./tmp/deploy-volumes.yaml
  - name: Deploy volumes
    shell: kubectl create -f ./tmp/deploy-volumes.yaml
    ignore_errors: yes

  ##
  # Deploy GETH
  ##
  - name: Generate Geth YAML
    template:
      src: deploy-geth.yaml.j2
      dest: ./tmp/deploy-geth.yaml
  - name: Deploy geth
    shell: kubectl create -f ./tmp/deploy-geth.yaml
    ignore_errors: yes

  ##
  # Deploy STELLAR
  ##
  - name: Deploy secret with Stellar Core configuration file
    shell: kubectl create secret generic stellar-core-cfg --from-file=stellar-core.cfg={{stellar_core_cfg_path}}
    ignore_errors: yes

  - name: Deploy secret with Horizon Proxy SSL credentials and nginx config
    shell: >
      kubectl create secret generic stellar-horizon-proxy-secret \
      --from-file={{stellar_horizon_ssl_crt_path}} \
      --from-file={{stellar_horizon_ssl_key_path}} \
      --from-file={{stellar_horizon_proxy_cfg_template_path}}
    ignore_errors: yes

  - name: Generate Stellar YAML
    template:
      src: deploy-stellar.yaml.j2
      dest: ./tmp/deploy-stellar.yaml
  - name: Deploy stellar
    shell: kubectl create -f ./tmp/deploy-stellar.yaml
    ignore_errors: yes

  ##
  # Deploy BIFROST
  ##
  - name: Deploy secret with database client credentials
    shell: kubectl create secret generic cloudsql-instance-credentials --from-file=credentials.json={{sql_client_key_path}}
    ignore_errors: yes
  - name: Deploy secret with Bifrost credentials
    shell: >
      kubectl create secret generic stellar-bifrost-credentials
      --from-literal=STELLAR_BIFROST_CFG='{{stellar_bifrost_cfg|to_json}}'
      --from-literal=STELLAR_BIFROST_DATABASE_URL="{{stellar_bifrost_database_url}}"
    ignore_errors: yes

  - name: Generate Bifrost YAML
    template:
      src: deploy-bifrost.yaml.j2
      dest: ./tmp/deploy-bifrost.yaml
  - name: Deploy Bifrost
    shell: kubectl create -f ./tmp/deploy-bifrost.yaml
    ignore_errors: yes
