apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: bifrost
spec:
  replicas: {{replicas}}
  serviceName: bifrost
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: bifrost
        bifrostApp: "1"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - bifrost
            topologyKey: "failure-domain.beta.kubernetes.io/zone"
      initContainers:
      - name: init-geth
        image: busybox
        command: ['sh', '-c', 'until nslookup geth-backend; do echo waiting for geth-backend; sleep 2; done;']
      - name: init-stellar
        image: busybox
        command: ['sh', '-c', 'until nslookup stellar-backend; do echo waiting for stellar-backend; sleep 2; done;']
      containers:
        - name: cloudsql-proxy
          image: "{{sql_cloudsql_proxy_image}}"
          command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                    "-instances={{stellar_bifrost_sql_instance}}",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - name: ssl-certs
              mountPath: /etc/ssl/certs
            - name: cloudsql
              mountPath: /cloudsql

        - name: bifrost
          image: "{{stellar_bifrost_image}}"
          command: ["sh", "-c", "/entry.sh init; /entry.sh server"]
          env:
          - name: BIFROST_CFG
            valueFrom:
              secretKeyRef:
                name: stellar-bifrost-credentials
                key: STELLAR_BIFROST_CFG
          - name: ETHEREUM_LAST_BLOCK
            value: "{{stellar_bifrost_ethereum_start_block}}"
          - name: BIFROST_ETHEREUM_RPC_SERVER
            value: "geth-backend:8545"
          - name: BIFROST_STELLAR_HORIZON
            value: "http://stellar-backend:8000"
          - name: BIFROST_DB_DSN
            valueFrom:
              secretKeyRef:
                name: stellar-bifrost-credentials
                key: STELLAR_BIFROST_DATABASE_URL
          ports:
          - name: bfr-http
            containerPort: 8000
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 3
            periodSeconds: 3

        - name: client
          image: "{{stellar_bifrost_client_image}}"
          ports:
          - name: bfr-cl-http
            containerPort: 3000
          env:
            - name: HORIZON_URL
              value: "https://{{stellar_bifrost_domain_name}}:$(BIFROST_FRONTEND_SERVICE_PORT_HORIZON_HTTPS)"
            - name: BIFROST_URL
              value: "http://{{stellar_bifrost_domain_name}}:$(BIFROST_FRONTEND_SERVICE_PORT_HTTP)"
            - name: ISSUING_ACCOUNT
              value: "{{stellar_bifrost_cfg.stellar.issuer_public_key}}"
            - name: NODE_ENV
              value: "{{stellar_bifrost_client_env}}"
            - name: ASSET_CODE
              value: "{{stellar_bifrost_cfg.stellar.token_asset_code}}"
            - name: ASSET_PRICE
              value: "{{stellar_bifrost_asset_price}}"
            - name: PRESALE
              value: "{{stellar_bifrost_presale}}"

        - name: horizon-proxy
          image: nginx
          volumeMounts:
            - name: stellar-bifrost-cert-data
              mountPath: /certs
              readOnly: true
            - name: stellar-bifrost-proxy-data
              mountPath: /config
              readOnly: true
          ports:
          - name: bfr-hrz-https
            containerPort: 2443
          env:
           - name: HOST
             value: _
           - name: PORT
             value: "2443"
           - name: BACKEND_URL
             value: "http://$(STELLAR_BACKEND_SERVICE_HOST):$(STELLAR_BACKEND_SERVICE_PORT_HORIZON_HTTP)"
           - name: SSL_CERT_PATH
             value: "/certs/{{stellar_bifrost_ssl_crt_filename}}"
           - name: SSL_CERT_KEY_PATH
             value: "/certs/{{stellar_bifrost_ssl_key_filename}}"
          command:
            - "/bin/bash"
            - "-c"
            - "envsubst '$''HOST $''PORT $''BACKEND_URL $''SSL_CERT_PATH $''SSL_CERT_KEY_PATH' < /config/nginx-proxy.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

        - name: bifrost-proxy
          image: nginx
          volumeMounts:
            - name: stellar-bifrost-cert-data
              mountPath: /certs
              readOnly: true
            - name: stellar-bifrost-proxy-data
              mountPath: /config
              readOnly: true
          ports:
          - name: bfr-https
            containerPort: 1443
          env:
           - name: HOST
             value: _
           - name: PORT
             value: "1443"
           - name: BACKEND_URL
             value: http://127.0.0.1:8000
           - name: SSL_CERT_PATH
             value: "/certs/{{stellar_bifrost_ssl_crt_filename}}"
           - name: SSL_CERT_KEY_PATH
             value: "/certs/{{stellar_bifrost_ssl_key_filename}}"
          command:
            - "/bin/bash"
            - "-c"
            - "envsubst '$''HOST $''PORT $''BACKEND_URL $''SSL_CERT_PATH $''SSL_CERT_KEY_PATH' < /config/nginx-ws-proxy.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

        - name: client-proxy
          image: nginx
          volumeMounts:
            - name: stellar-bifrost-cert-data
              mountPath: /certs
              readOnly: true
            - name: stellar-bifrost-proxy-data
              mountPath: /config
              readOnly: true
          ports:
          - name: bfr-cl-https
            containerPort: 443
          env:
           - name: HOST
             value: _
           - name: PORT
             value: "443"
           - name: BACKEND_URL
             value: http://127.0.0.1:3000
           - name: SSL_CERT_PATH
             value: "/certs/{{stellar_bifrost_ssl_crt_filename}}"
           - name: SSL_CERT_KEY_PATH
             value: "/certs/{{stellar_bifrost_ssl_key_filename}}"
          command:
            - "/bin/bash"
            - "-c"
            - "envsubst '$''HOST $''PORT $''BACKEND_URL $''SSL_CERT_PATH $''SSL_CERT_KEY_PATH' < /config/nginx-proxy.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir:
        - name: stellar-bifrost-proxy-data
          secret:
            secretName: stellar-bifrost-proxy-secret
        - name: stellar-bifrost-cert-data
          secret:
            secretName: stellar-bifrost-cert-secret
