apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: stellar
  labels:
    core_config_version: "{{stellar_core_config_version}}"
spec:
  replicas: {{replicas}}
  serviceName: stellar
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: stellar
        bifrostApp: "1"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - stellar
            topologyKey: "failure-domain.beta.kubernetes.io/zone"
      containers:
        - name: core
          image: "{{stellar_core_image}}"
          ports:
          - name: core-http
            containerPort: 11625
          - name: core-peer
            containerPort: 11626
          command:
            - "sh"
            - "-c"
            - |
              if [ -d /data/buckets ];
              then
              echo "/data/buckets exists, so skip DB schema creation";
              NONEWDB=1;
              else
              echo "/data/buckets does not exist, initialize DB schema";
              NONEWDB="";
              fi;
              export STELLAR_CORE_CFG=/configs/$HOSTNAME.cfg;
              /bin/bash /start
          readinessProbe:
            tcpSocket:
              port: 11626
            initialDelaySeconds: 3
            periodSeconds: 3
          volumeMounts:
          - name: stellar-core-cfg
            mountPath: /configs
          - name: stellar-data
            mountPath: /data
            subPath: core-data
          env:
            - name: NONEWHIST
              value: "1"
            - name: DATABASE_URL
              value: postgres://core:1q2w3e@127.0.0.1:5432/core?sslmode=disable

        - name: core-db
          image: postgres
          ports:
          - name: core-pg
            containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: core
            - name: POSTGRES_PASSWORD
              value: 1q2w3e
            - name: PGPORT
              value: "5432"
          volumeMounts:
          - name: stellar-data
            subPath: core-pgdata
            mountPath: /var/lib/postgresql/data

        - name: horizon
          image: "{{stellar_horizon_image}}"
          command:
            - "sh"
            - "-c"
            - |
              if [ ! -f /data/database-initialized ];
              then
              horizon db init && touch /data/database-initialized && echo "Horizon DB initialized";
              else
              echo "Horizon DB was initialized before";
              fi;
              horizon --port 8000 --db-url=$(DATABASE_URL) --stellar-core-db-url=$(STELLAR_CORE_DATABASE_URL) --ingest=true --stellar-core-url=http://127.0.0.1:11626
          ports:
          - name: horizon-http
            containerPort: 8000
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 3
            periodSeconds: 3
          env:
            - name: DATABASE_URL
              value: postgres://horizon:1q2w3e@127.0.0.1:6432/horizon?sslmode=disable
            - name: STELLAR_CORE_DATABASE_URL
              value: postgres://core:1q2w3e@127.0.0.1:5432/core?sslmode=disable
            - name: INGEST
              value: "true"
          volumeMounts:
          - name: stellar-data
            subPath: horizon-data
            mountPath: /data

        - name: horizon-db
          image: postgres
          ports:
          - name: horizon-pg
            containerPort: 6432
          env:
            - name: POSTGRES_USER
              value: horizon
            - name: POSTGRES_PASSWORD
              value: 1q2w3e
            - name: PGPORT
              value: "6432"
          readinessProbe:
            tcpSocket:
              port: 6432
            initialDelaySeconds: 3
            periodSeconds: 3
          volumeMounts:
          - name: stellar-data
            subPath: horizon-pgdata
            mountPath: /var/lib/postgresql/data

        - name: horizon-proxy
          image: nginx
          volumeMounts:
            - name: tls-data
              mountPath: /certs
              readOnly: true
            - name: nginx-proxy-cfg-template-data
              mountPath: /cfg-template
              readOnly: true
          ports:
          - name: horizon-https
            containerPort: 443
          env:
           - name: HOST
             value: _
           - name: PORT
             value: "443"
           - name: BACKEND_URL
             value: http://127.0.0.1:8000
           - name: SSL_CERT_PATH
             value: "/certs/tls.crt"
           - name: SSL_CERT_KEY_PATH
             value: "/certs/tls.key"
          command:
            - "/bin/bash"
            - "-c"
            - "envsubst '$''HOST $''PORT $''BACKEND_URL $''SSL_CERT_PATH $''SSL_CERT_KEY_PATH' < /cfg-template/nginx-proxy.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

      volumes:
        - name: stellar-core-cfg
          secret:
            secretName: stellar-core-cfg-{{stellar_core_config_version}}
        - name: tls-data
          secret:
            secretName: stellar-tls-secret
        - name: nginx-proxy-cfg-template-data
          secret:
            secretName: nginx-proxy-cfg-template

  volumeClaimTemplates:
  - metadata:
      name: stellar-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "{{stellar_storage_capacity_gb}}Gi"
      storageClassName: "{{namespace}}-stellar"
